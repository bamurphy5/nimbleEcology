% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dCJS.R
\name{dCJS}
\alias{dCJS}
\alias{dCJS_ss}
\alias{dCJS_sv}
\alias{dCJS_vs}
\alias{dCJS_vv}
\alias{rCJS_ss}
\alias{rCJS_sv}
\alias{rCJS_vs}
\alias{rCJS_vv}
\title{Cormack-Jolly-Seber distribution for use in NIMBLE models}
\usage{
dCJS_ss(x, probSurvive, probCapture, len = 0, log = 0)

dCJS_sv(x, probSurvive, probCapture, len = 0, log = 0)

dCJS_vs(x, probSurvive, probCapture, len = 0, log = 0)

dCJS_vv(x, probSurvive, probCapture, len = 0, log = 0)

rCJS_ss(n, probSurvive, probCapture, len = 0)

rCJS_sv(n, probSurvive, probCapture, len = 0)

rCJS_vs(n, probSurvive, probCapture, len = 0)

rCJS_vv(n, probSurvive, probCapture, len = 0)
}
\arguments{
\item{x}{capture-history vector of 0s (not captured) and 1s (captured). Do not include the initial capture, which is assumed.}

\item{probSurvive}{survival probability, either a scalar (for dCJS_s*) or a vector (for dCJS_v*).}

\item{probCapture}{capture probability, either a scalar (for dCJS_*s) or a vector (for dCJS_*v).}

\item{len}{length of capture history (needed for rCJSxx).}

\item{log}{TRUE or 1 to return log probability. FALSE or 0 to return probability.}

\item{n}{length of random sequence}
}
\description{
\code{dCJS_**} functions provide a basic distribution for capture history vectors based
 on survival and capture probabilities. The different aliases are for scalar ("s", time-independent)
 versus vector ("v", time-dependent) survival and capture probabilities, in that order.
}
\details{
These nimbleFunctions provide distributions that can be used in code (via \code{nimbleCode}) for \link{nimbleModel}.

These are written in the format of user-defined distributions to extend NIMBLE's
use of the BUGS model language.  More information about writing user-defined distributions can be found
in the NIMBLE User Manual at \code{https://r-nimble.org}.

The first argument to a "d" function is always named \code{x} and is given on the
left-hand side of a (stochastic) model declaration in the BUGS model language (used by NIMBLE).
When using these distributions in a NIMBLE model, the user
should not provide the \code{log} argument.  (It is always set to \code{TRUE} when used
in a NIMBLE model.)

For example,

\code{captures[1:T] ~ dCSJ_ss(survive, capture, T)}

declares a vector node, \code{captures[1:T]}, that follows a capture-recapture distribution
with scalar survival probability \code{survive} and scalar capture probability \code{capture}
(assuming \code{survive} and \code{capture} are defined elsewhere in the model).
If time-dependent survival and capture probabilities are needed, use

\code{captures[1:T] ~ dCSJ_vv(survive[1:T], capture[1:T], T)}.

In fact, the \code{len} argument (\code{T} in these examples) will be ignored during model
probability calculations.  It will be used only for simulations.

It is important to use the time indexing correctly for survival.  \code{probSurvive[t]} is the survival
probabilty from time \code{t-1} to time \code{t}.  Time indexing for detection is more obvious:
\code{probDetect[t]} is the detection probability at time \code{t}.
}
\examples{
\dontrun{
# Set up constants and initial values for defining the model
dat <- c(1,1,0,0) # A vector of observations
probSurvive <- 0.6
probCapture <- 0.4


# Define code for a nimbleModel
nc <- nimbleCode({
  x[1:4] ~ dCJSss(probSurvive, probCapture, len = 4)
  probSurvive ~ dunif(0,1)
  probCapture ~ dunif(0,1)
})

# Build the model, providing data and initial values
CJS_model <- nimbleModel(nc, data = list(x = dat),
                         inits = list(probSurvive = probSurvive,
                                      probCapture = probCapture))

# Calculate log probability of data from the model
CJS_model$calculate()
# Use the model for a variety of other purposes...
}
}
\references{
D. Turek, P. de Valpine and C. J. Paciorek. 2016. Efficient Markov chain Monte
Carlo sampling for hierarchical hidden Markov models. Environmental and Ecological Statistics
23:549â€“564. DOI 10.1007/s10651-016-0353-z
}
\seealso{
For multi-state or multi-event capture-recapture models, see \link{dHMM} or \link{dDHMM}.
}
\author{
Ben Goldstein, Perry de Valpine, and Daniel Turek
}
