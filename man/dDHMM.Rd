% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dDHMM.R
\name{dDHMM}
\alias{dDHMM}
\alias{dDHMMo}
\alias{rDHMM}
\alias{rDHMMo}
\title{Dynamic Hidden Markov Model distribution for use in NIMBLE models}
\usage{
dDHMM(x, init, probObs, probTrans, len, log = 0)

dDHMMo(x, init, probObs, probTrans, len, log = 0)

rDHMM(n, init, probObs, probTrans, len)

rDHMMo(n, init, probObs, probTrans, len)
}
\arguments{
\item{x}{vector of observation classes, one of which could be defined as "not observed".}

\item{init}{vector of initial state probabilities}

\item{probObs}{time-independent matrix of observation probabilities.
First two dimensions of \code{probObs} are of size (number of possible observation classes) x
 (number of possible system states).  In \code{dDHMMo}, the third dimension of \code{probObs} is of
 size (number of observation times).}

\item{probTrans}{time-dependent matrix of system state-transition probabilities.
Dimension of \code{probTrans} is (number of possible system states) x  (number of possible system states)
x (number of observation times).}

\item{len}{length of observations (needed for rDHMM)}

\item{log}{TRUE or 1 to return log probability. FALSE or 0 to return probability.}

\item{n}{length of random sequence}
}
\description{
\code{dDHMM} and \code{dDHMMo} provide Dynamic hidden Markov model distributions for NIMBLE models.
"Dynamic" here means that the matrix of state transition probabilities in indexed by time.  The
\code{dDHMMo} alias is used when observation probabilities are indexed by time.
}
\details{
Compared to writing NIMBLE models with discrete latent states, use of these DHMM distributions allows
one to directly integrate over such discrete latent states and hence leave them out of the NIMBLE
model code.

These nimbleFunctions provide distributions that can be used in code (via \link{nimbleCode})
for \link{nimbleModel}.

These are written in the format of user-defined distributions to extend NIMBLE's
use of the BUGS model language.  More information about writing user-defined distributions can be found
in the NIMBLE User Manual at \code{https://r-nimble.org}.

The first argument to a "d" function is always named \code{x} and is given on the
left-hand side of a (stochastic) model declaration in the BUGS model language (used by NIMBLE).
When using these distributions in a NIMBLE model, the user
should not provide the \code{log} argument.  (It is always set to \code{TRUE} when used
in a NIMBLE model.)

For example, in a NIMBLE model,

\code{observedStates[1:T] ~ dDHMM(initStates[1:S], observationProbs[1:O, 1:S],
transitionProbs[1:S, 1:S, 1:(T-1)], T)}

declares that the \code{observedStates[1:T]} vector follows a dynamic hidden Markov model distribution
with parameters as indicated, assuming all the parameters have been declared elsewhere in the model.  In
this case, \code{S} is the number of system states, \code{O} is the number of observation classes, and
\code{T} is the number of observation occasions.

If the observation probabilities are time-dependent, one would use:

\code{observedStates[1:T] ~ dDHMMo(initStates[1:S], observationProbs[1:O, 1:S, 1:(T-1)],
transitionProbs[1:S, 1:S, 1:(T-1)], T)}
}
\examples{
\dontrun{
# Set up constants and initial values for defining the model
dat <- c(1,2,1,1) # A vector of observations
init <- c(0.4, 0.2, 0.4) # A vector of initial state probabilities
probObs <- t(array( # A matrix of observation probabilities
       c(1, 0.2, 1,
         0, 0.8, 0), c(3, 2)))

probTrans <- array(rep(0.5, 27), # A matrix of time-indexed transition probabilities
            c(3,3,3))

# Define code for a nimbleModel
 nc <- nimbleCode({
   x[1:4] ~ dDHMM(init[1:3], probObs = probObs[1:2,1:3],
                  probTrans = probTrans[1:3, 1:3, 1:4], len = 4)

   for (i in 1:3) {
     init[i] ~ dunif(0,1)

     for (j in 1:3) {
       for (t in 1:4) {
         probTrans[i,j,t] ~ dunif(0,1)
       }
     }

     probObs[1,i] ~ dunif(0,1)
     probObs[2,i] <- 1 - probObs[1,i]
   }
 })

# Build the model, providing data and initial values
DHMM_model <- nimbleModel(nc,
                          data = list(x = dat),
                          inits = list(init = init,
                                       probObs = probObs,
                                       probTrans = probTrans)))
# Calculate log probability of x from the model
DHMM_model$calculate()
# Use the model for a variety of other purposes...
}

}
\references{
D. Turek, P. de Valpine and C. J. Paciorek. 2016. Efficient Markov chain Monte
Carlo sampling for hierarchical hidden Markov models. Environmental and Ecological Statistics
23:549â€“564. DOI 10.1007/s10651-016-0353-z
}
\seealso{
For hidden Markov models with time-independent transitions, see \link{dHMM} and \link{dHMMo}.
For simple capture-recapture, see \link{dCJS}.
}
\author{
Perry de Valpine, Daniel Turek, and Ben Goldstein
}
